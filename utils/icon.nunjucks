/* eslint-disable */
// {{comment}}
{% if reactPureRender %}
import Component from 'react-pure-render/component';
import Radium from 'radium';
import React, { PropTypes as RPT } from 'react';
{%- else %}
import React, { Component, PropTypes as RPT } from 'react';
{%- endif %}

const iconList = [
  {%- for icon in icons %}
  '{{icon.name}}',
  {%- endfor %}
]

@Radium
export default class Icon extends Component {

  static propTypes = {
    color: RPT.string,
    height: RPT.number,
    kind: RPT.oneOf(iconList).isRequired,
    onClick: RPT.func,
    preview: RPT.bool,
    size: RPT.oneOfType([
      RPT.number,
      RPT.string
    ]),
    style: RPT.oneOfType([
      RPT.array,
      RPT.object
    ]),
    width: RPT.number,
    wrapperStyle: RPT.oneOfType([
      RPT.array,
      RPT.object
    ])
  };

  static defaultProps = {
    size: 32,
    color: '#333'
  }

  render() {
    const { preview } = this.props

    return preview ?
      this.renderPreview() :
      this.renderIcon()
  }

  renderIcon() {
    const { kind, wrapperStyle } = this.props;

    if (wrapperStyle)
      return <div style={wrapperStyle}>{this.getIcon(kind)}</div>

    return this.getIcon(kind)
  }

  renderPreview() {
    return (
      <div>
        {iconList.map(kind => this.renderPreviewKind(kind))}
      </div>
    )
  }

  renderPreviewKind(kind) {
    return (
      <span key={kind}>
        <h3>&lt;Icon kind="{kind}" /&gt;</h3>
        {this.renderIcon(kind)}
      </span>
    )
  }

  getIcon(kind) {
    const { color, height, onClick, size, style, width } = this.props;

    switch (kind) {
      default: return null;
      {% for icon in icons -%}
        case ('{{icon.name}}'): return ({{icon.svg | safe}});
      {% endfor -%}
    }
  }
}
